struct RMstruct
{

	float RMSphere(float3 pos)
	{
		return length(pos) - 50;
	}

	float3 RMNormal(float3 pos)
	{
		float2 Off = float2(0.01,0);
		return normalize (float3(
		RMSphere(pos + Off.xyy) - RMSphere(pos - Off.xyy),
		RMSphere(pos + Off.yxy) - RMSphere(pos - Off.yxy),
		RMSphere(pos + Off.yyx) - RMSphere(pos - Off.yyx)
		));
	}

	float SmoothUnion (float d1, float d2, float k )
	{
    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
    return lerp( d2, d1, h ) - k*h*(1.0-h); 
	}
}; 

RMstruct RM;
float4 col = 0;
float3 pos = WorldPosition;
float3 Normal = 0;


for(int i=0 ; i<MaxSteps ; i++)
{
	
	if(SceneDepth < length(pos - CameraPosition))
	break;

	float d1 = RM.RMSphere(pos - ObjectPosition);
	float d2 = SceneDepth - length(pos - CameraPosition); 

	float distance = RM.SmoothUnion(d1, d2 , Smooth);

	if(distance < 0.01)
	{
		col = 1;
		Normal = RM.RMNormal(pos - ObjectPosition);
		break;
	}

	pos += CameraVector * 1 ;

}
 
return float4 (Normal, col.a);